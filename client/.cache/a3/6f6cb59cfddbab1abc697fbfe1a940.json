{"id":"node_modules/yargs/lib/argsert.js","dependencies":[{"name":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\package.json","includedInParent":true,"mtime":1602227136123},{"name":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\node_modules\\yargs\\package.json","includedInParent":true,"mtime":1602227114287},{"name":"./command","loc":{"line":1,"column":24},"parent":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\node_modules\\yargs\\lib\\argsert.js","resolved":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\node_modules\\yargs\\lib\\command.js"},{"name":"./yerror","loc":{"line":2,"column":23},"parent":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\node_modules\\yargs\\lib\\argsert.js","resolved":"C:\\Users\\reyand oneil\\Documents\\phase2\\week-5\\kanban-app\\client\\node_modules\\yargs\\lib\\yerror.js"}],"generated":{"js":"const command = require('./command')()\nconst YError = require('./yerror')\n\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']\n\nmodule.exports = function (expected, callerArguments, length) {\n  // TODO: should this eventually raise an exception.\n  try {\n    // preface the argument description with \"cmd\", so\n    // that we can run it through yargs' command parser.\n    var position = 0\n    var parsed = {demanded: [], optional: []}\n    if (typeof expected === 'object') {\n      length = callerArguments\n      callerArguments = expected\n    } else {\n      parsed = command.parseCommand('cmd ' + expected)\n    }\n    const args = [].slice.call(callerArguments)\n\n    while (args.length && args[args.length - 1] === undefined) args.pop()\n    length = length || args.length\n\n    if (length < parsed.demanded.length) {\n      throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length +\n        ' but received ' + args.length + '.')\n    }\n\n    const totalCommands = parsed.demanded.length + parsed.optional.length\n    if (length > totalCommands) {\n      throw new YError('Too many arguments provided. Expected max ' + totalCommands +\n        ' but received ' + length + '.')\n    }\n\n    parsed.demanded.forEach(function (demanded) {\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = demanded.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)\n      position += 1\n    })\n\n    parsed.optional.forEach(function (optional) {\n      if (args.length === 0) return\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = optional.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)\n      position += 1\n    })\n  } catch (err) {\n    console.warn(err.stack)\n  }\n}\n\nfunction guessType (arg) {\n  if (Array.isArray(arg)) {\n    return 'array'\n  } else if (arg === null) {\n    return 'null'\n  }\n  return typeof arg\n}\n\nfunction argumentTypeError (observedType, allowedTypes, position, optional) {\n  throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument.' +\n    ' Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.')\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/yargs/lib/argsert.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/yargs/lib/argsert.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}}],"sources":{"node_modules/yargs/lib/argsert.js":"const command = require('./command')()\nconst YError = require('./yerror')\n\nconst positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth']\n\nmodule.exports = function (expected, callerArguments, length) {\n  // TODO: should this eventually raise an exception.\n  try {\n    // preface the argument description with \"cmd\", so\n    // that we can run it through yargs' command parser.\n    var position = 0\n    var parsed = {demanded: [], optional: []}\n    if (typeof expected === 'object') {\n      length = callerArguments\n      callerArguments = expected\n    } else {\n      parsed = command.parseCommand('cmd ' + expected)\n    }\n    const args = [].slice.call(callerArguments)\n\n    while (args.length && args[args.length - 1] === undefined) args.pop()\n    length = length || args.length\n\n    if (length < parsed.demanded.length) {\n      throw new YError('Not enough arguments provided. Expected ' + parsed.demanded.length +\n        ' but received ' + args.length + '.')\n    }\n\n    const totalCommands = parsed.demanded.length + parsed.optional.length\n    if (length > totalCommands) {\n      throw new YError('Too many arguments provided. Expected max ' + totalCommands +\n        ' but received ' + length + '.')\n    }\n\n    parsed.demanded.forEach(function (demanded) {\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = demanded.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, demanded.cmd, position, false)\n      position += 1\n    })\n\n    parsed.optional.forEach(function (optional) {\n      if (args.length === 0) return\n      const arg = args.shift()\n      const observedType = guessType(arg)\n      const matchingTypes = optional.cmd.filter(function (type) {\n        return type === observedType || type === '*'\n      })\n      if (matchingTypes.length === 0) argumentTypeError(observedType, optional.cmd, position, true)\n      position += 1\n    })\n  } catch (err) {\n    console.warn(err.stack)\n  }\n}\n\nfunction guessType (arg) {\n  if (Array.isArray(arg)) {\n    return 'array'\n  } else if (arg === null) {\n    return 'null'\n  }\n  return typeof arg\n}\n\nfunction argumentTypeError (observedType, allowedTypes, position, optional) {\n  throw new YError('Invalid ' + (positionName[position] || 'manyith') + ' argument.' +\n    ' Expected ' + allowedTypes.join(' or ') + ' but received ' + observedType + '.')\n}\n"},"lineCount":73}},"error":null,"hash":"e4d5d9c1b4544b16d26299c4a7179fc6","cacheData":{"env":{}}}